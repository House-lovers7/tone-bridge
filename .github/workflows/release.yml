name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        cat CHANGELOG.md
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}

  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Build Gateway Binary
      working-directory: ./services/gateway
      run: |
        GOOS=${{ runner.os == 'macOS' && 'darwin' || 'linux' }} \
        GOARCH=${{ matrix.arch }} \
        go build -ldflags "-X main.Version=${{ needs.create-release.outputs.version }}" \
        -o tonebridge-gateway-${{ runner.os }}-${{ matrix.arch }} \
        ./cmd/api
    
    - name: Upload Gateway Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./services/gateway/tonebridge-gateway-${{ runner.os }}-${{ matrix.arch }}
        asset_name: tonebridge-gateway-${{ runner.os }}-${{ matrix.arch }}
        asset_content_type: application/octet-stream

  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [gateway, llm, web, slack]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Determine build context
      id: context
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          echo "context=./services/gateway" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "llm" ]; then
          echo "context=./services/llm" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "web" ]; then
          echo "context=./web" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "slack" ]; then
          echo "context=./integrations/slack" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          ${{ secrets.DOCKER_USERNAME }}/tonebridge-${{ matrix.service }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ steps.context.outputs.context }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}

  create-helm-chart:
    name: Create Helm Chart
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-images]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Helm
      uses: azure/setup-helm@v3
    
    - name: Package Helm chart
      run: |
        mkdir -p helm-output
        # Create helm chart (assuming it exists in charts/ directory)
        # helm package charts/tonebridge --version ${{ needs.create-release.outputs.version }} -d helm-output/
        
        # For now, create a placeholder
        echo "Helm chart would be packaged here" > helm-output/tonebridge-${{ needs.create-release.outputs.version }}.tgz
    
    - name: Upload Helm chart
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./helm-output/tonebridge-${{ needs.create-release.outputs.version }}.tgz
        asset_name: tonebridge-helm-${{ needs.create-release.outputs.version }}.tgz
        asset_content_type: application/gzip

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install MkDocs
      run: |
        pip install mkdocs mkdocs-material
    
    - name: Build documentation
      run: |
        # mkdocs build
        echo "Documentation would be built here"
    
    - name: Deploy to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site