name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Golang Gateway Tests
  test-gateway:
    name: Test Gateway Service
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: services/gateway/go.mod
        cache: true
        cache-dependency-path: services/gateway/go.sum
    
    - name: Tidy dependencies
      working-directory: ./services/gateway
      run: go mod tidy
    
    - name: Download dependencies
      working-directory: ./services/gateway
      run: go mod download
    
    - name: Run tests
      working-directory: ./services/gateway
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./services/gateway/coverage.out
        flags: gateway
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: services/gateway
        args: --timeout=5m

  # Python LLM Service Tests
  test-llm:
    name: Test LLM Service
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/llm/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./services/llm
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Run linter
      working-directory: ./services/llm
      run: flake8 app/ --max-line-length=120
    
    - name: Run tests
      working-directory: ./services/llm
      run: pytest --cov=app --cov-report=xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./services/llm/coverage.xml
        flags: llm

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-gateway, test-llm]
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: tonebridge
          POSTGRES_PASSWORD: tonebridge123
          POSTGRES_DB: tonebridge_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build services
      run: |
        cd infrastructure
        docker-compose build
    
    - name: Start services
      run: |
        cd infrastructure
        docker-compose up -d
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run API tests
      run: |
        chmod +x tests/api_test.sh
        ./tests/api_test.sh
    
    - name: Run Python integration tests
      run: |
        pip install requests
        python tests/test_integration.py
    
    - name: Stop services
      if: always()
      run: |
        cd infrastructure
        docker-compose down -v

  # Build and Push Docker Images
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [gateway, llm, web, slack]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Determine build context
      id: context
      run: |
        if [ "${{ matrix.service }}" = "gateway" ]; then
          echo "context=./services/gateway" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "llm" ]; then
          echo "context=./services/llm" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "web" ]; then
          echo "context=./web" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.service }}" = "slack" ]; then
          echo "context=./integrations/slack" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ${{ steps.context.outputs.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [test-gateway, test-llm]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten

  # Load Testing (Optional - runs on schedule)
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Start services
      run: |
        cd infrastructure
        docker-compose up -d
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
    
    - name: Run load test
      run: |
        python tests/load_test.py
      env:
        NUM_USERS: 5
        REQUESTS_PER_USER: 10
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results-${{ github.run_number }}-${{ github.run_attempt }}
        path: load-test-results.json
    
    - name: Stop services
      if: always()
      run: |
        cd infrastructure
        docker-compose down -v

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # kubectl apply -f k8s/staging/ --namespace=staging
        # or
        # ssh staging-server 'docker-compose pull && docker-compose up -d'

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment script here
        # kubectl apply -f k8s/production/ --namespace=production
        # or
        # ssh prod-server 'docker-compose pull && docker-compose up -d'